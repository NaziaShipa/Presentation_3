// Annotation
public class AnnotationsDemo {

    /**
     * This method can be invoked by process builders and flows
     * */
    @InvocableMethod
    public static void justAnotherMethod() {
        System.debug('Can you call me from process builder?');
    }
}


-------------------------------------------------------------------------

// Test

/**
 * Fitness class with helpful methods
 * to calculate human fitness
 * */
public class Fitness {

    /**
     * calculateBMI method
     * accepts body weight (should be in kg)
     * and body height (should be in meter)
     * returns BMI value
     * */
    public static Decimal calculateBMI(Decimal weight, Decimal height) {
        if(height <= 0 || weight < 0){
            return -1;
        }
        Decimal result  = weight / (height*height);
        return result;
    }

    /**
     * calculatePace method
     * accepts distance (in km)
     * and minutes
     * returns pace in km/hr
     * */
    public static Decimal calculatePace(Decimal distance, Decimal minutes) {
        if(distance < 0 || minutes <= 0){
            return -1;
        }
        Decimal hr = minutes/60;
        Decimal pace = distance / hr;
        return pace;
    }
}

---------------------- Test Class -----------------------------------
@isTest
public class FitnessTest {

    @isTest
    public static void calculateBMITest1(){
		Decimal weight = 60;
        Decimal height = 1.2;

        Decimal result = Fitness.calculateBMI(weight, height);
        result = result.setScale(2);
        System.assertEquals(41.67, result, 'BMI should be 41.67 for 60kg weight and 1.2 mtr height');
    }

    @isTest
    public static void calculateBMITest2(){
		Decimal weight = 0;
        Decimal height = 1.2;

        Decimal result = Fitness.calculateBMI(weight, height);
        System.assertEquals(0, result, 'BMI should be 0 for 0kg weight and 1.2 mtr height');
    }

    @isTest
    public static void calculateBMITest3(){
		Decimal weight = 60;
        Decimal height = 0;

        Decimal result = Fitness.calculateBMI(weight, height);
        System.assertEquals(-1, result, 'Invalid input');
    }

    @isTest
    public static void calculateBMITest4(){
		Decimal weight = -60;
        Decimal height = 1.2;

        Decimal result = Fitness.calculateBMI(weight, height);
        System.assertEquals(-1, result, 'Invalid input');
    }

    @isTest
    public static void calculateBMITest5(){
		Decimal weight = 60;
        Decimal height = -1.2;

        Decimal result = Fitness.calculateBMI(weight, height);
        System.assertEquals(-1, result, 'Invalid input');
    }

    @isTest
    public static void calculatePaceTest1(){
        Decimal distance = 10;
        Decimal minutes = 60;

        Decimal result = Fitness.calculatePace(distance, minutes);
        System.assertEquals(10, result, 'Pace should 10km/hr for 10 km in 60 minutes');
    }

    @isTest
    public static void calculatePaceTest2(){
        Decimal distance = 10;
        Decimal minutes = 0;

        Decimal result = Fitness.calculatePace(distance, minutes);
        System.assertEquals(-1, result, 'Invalid input');
    }

    @isTest
    public static void calculatePaceTest3(){
        Decimal distance = 0;
        Decimal minutes = 60;

        Decimal result = Fitness.calculatePace(distance, minutes);
        System.assertEquals(0, result, 'Pace should 0km/hr for 0 km in 60 minutes');
    }

    @isTest
    public static void calculatePaceTest4(){
        Decimal distance = -10;
        Decimal minutes = 60;

        Decimal result = Fitness.calculatePace(distance, minutes);
        System.assertEquals(-1, result, 'Invalid input');
    }

    @isTest
    public static void calculatePaceTest5(){
        Decimal distance = 10;
        Decimal minutes = -60;

        Decimal result = Fitness.calculatePace(distance, minutes);
        System.assertEquals(-1, result, 'Invalid input');
    }
}



// LIKE Operator
SELECT Name, Status, LeadSource, Company, Email FROM Lead WHERE Status LIKE 'Closed%' AND LeadSource='Web'

//......................ORDER BY..................................................................................
// Sorting by Name
SELECT Name, Status, LeadSource, Company, Email FROM Lead ORDER BY Name

// Sorting by Name in descending order
SELECT Name, Status, LeadSource, Company, Email FROM Lead ORDER BY Name DESC

//Order by clause with Where clause
SELECT Name, Status, Company, Email FROM Lead WHERE Status='Closed - Converted' ORDER BY Name

//.......................limit....................................................................................

// Limit 10 rows
SELECT Name, Status, LeadSource, Company, Email, CreatedDate FROM Lead LIMIT 10


//...............................offset....................................................................
// OFFSET 5
SELECT Name, Status, LeadSource, Company, Email, CreatedDate FROM Lead OFFSET 5

// Get latest 5 records and skip first 5
SELECT Name, Status, LeadSource, Company, Email, CreatedDate FROM Lead ORDER BY CreatedDate DESC LIMIT 5 OFFSET 5

//..................................date literals..............................................................

// Get all leads created on 15th June 2020
SELECT Name, Status, LeadSource, Company, Email, CreatedDate FROM Lead WHERE CreatedDate>2020-06-15T00:00:00.000+0000

// Get all leads created today
SELECT Name, Status, LeadSource, Company, Email, CreatedDate FROM Lead WHERE CreatedDate=TODAY

// Get all leads created after yesterday
SELECT Name, Status, LeadSource, Company, Email, CreatedDate FROM Lead WHERE CreatedDate>YESTERDAY

// Get all leads created in last 10 days
SELECT Name, Status, LeadSource, Company, Email, CreatedDate FROM Lead WHERE CreatedDate=LAST_N_DAYS:10


//..................................parent to child..................................................

// Get all related contacts of an account
SELECT Name, Phone, Website, (SELECT Name, Department, Email FROM Contacts) FROM Account

// Get all related contacts (with where clause) of an account (with where clause)
SELECT Name, Phone, Website, (SELECT Name, Department, Email FROM Contacts WHERE Department='Finance') FROM Account WHERE Name='United Oil & Gas, UK'

//............................Child to parent.............................................................

// Get account information from contact
SELECT Name, Phone, Department, Account.Name, Account.Website FROM Contact

// get grandparent (user) object details
SELECT Name, Phone, Department, Account.Name, Account.Website, Account.Owner.Name FROM Contact
